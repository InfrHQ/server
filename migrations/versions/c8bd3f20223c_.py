"""empty message

Revision ID: c8bd3f20223c
Revises:
Create Date: 2023-08-21 15:13:44.245330

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision = 'c8bd3f20223c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():

    # Create extension
    op.execute('CREATE EXTENSION IF NOT EXISTS vector;')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apikey',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('date_created', sa.DateTime(), nullable=True),
                    sa.Column('date_updated', sa.DateTime(), nullable=True),
                    sa.Column('status', sa.Enum('active', 'inactive', name='status_enum'), nullable=True),
                    sa.Column('access_level', sa.ARRAY(sa.String()), nullable=True),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('key', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id'),
                    sa.UniqueConstraint('key')
                    )
    op.create_table('device',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('status', sa.Enum('active', 'inactive', name='status_enum'), nullable=True),
                    sa.Column('date_created', sa.DateTime(), nullable=True),
                    sa.Column('date_updated', sa.DateTime(), nullable=True),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('device_type', sa.Enum('desktop', 'mobile',
                              'tablet', name='device_type_enum'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('user',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('status', sa.Enum('active', 'inactive', name='status_enum'), nullable=True),
                    sa.Column('date_created', sa.DateTime(), nullable=True),
                    sa.Column('date_updated', sa.DateTime(), nullable=True),
                    sa.Column('email_id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    op.create_table('segment',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('device_id', sa.String(), nullable=True),
                    sa.Column('status', sa.Enum('active', 'inactive', name='status_enum'), nullable=True),
                    sa.Column('item_type', sa.Enum('screenshot', name='item_type_enum'), nullable=True),
                    sa.Column('date_created', sa.DateTime(), nullable=True),
                    sa.Column('date_updated', sa.DateTime(), nullable=True),
                    sa.Column('date_generated', sa.DateTime(), nullable=True),
                    sa.Column('available_in', sa.ARRAY(sa.String()), nullable=True),
                    sa.Column('lat', sa.Float(), nullable=True),
                    sa.Column('lng', sa.Float(), nullable=True),
                    sa.Column('vector', Vector(dim=768), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('extracted_text', sa.Text(), nullable=True),
                    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
                    sa.ForeignKeyConstraint(['device_id'], ['device.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    with op.batch_alter_table('segment', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_segment_device_id'), ['device_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('segment', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_segment_device_id'))

    op.drop_table('segment')
    op.drop_table('user')
    op.drop_table('device')
    op.drop_table('apikey')
    # ### end Alembic commands ###
